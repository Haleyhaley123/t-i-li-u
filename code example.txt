showmasterdatacode

allowcopypaste


public string ResultAtKey 
        {
            get
            {
                return ResultAt..ToString("MM/dd/yyyy");
            }
        } 
		
		
		
		 List<LabReultModel> lab_result_final = new List<LabReultModel>();
            var lab_result_group = lab_result.GroupBy(p => p.UpdateTimeRaw, (key, g) => new { Id = key, Data = g.OrderByDescending(e => e.UpdateTime).ToList() });
            int index = 0;
            foreach (var lab in lab_result_group)
            {
                var list_data = lab.Data;
                foreach (var item in list_data)
                {
                    if (!lab_result_final.Any(x => x.ProfileID == item.ProfileID) || index ==0)
                    {
                        lab_result_final.Add(item);
                    }    
                    continue; 
                }
                index = index + 1;
            }
		
DATABASE:


user: eformdev

pass: Effomm@12345678


api convert file to base64
 [HttpGet]
        [Route("ReadFile/PDF")]
        [Permission(Code = "GUPLO2")]
        public IHttpActionResult Read()
        {
            Byte[] bytes = File.ReadAllBytes("D:\\FileShare\\UploadFiles\\Images\\Temp\\16-11-2022\\8127bb80-6e29-4e3b-b0a9-022f1e6f2d8a.pdf");
            String file = Convert.ToBase64String(bytes);            
            return Content(HttpStatusCode.OK, file);           
           
        }
		
		
		
		 protected List<MedicalRecordViewModel> GetListVitalSignPediatricsIPD(Guid visitId)
        {
            Dictionary<string, string> dic_vital = new Dictionary<string, string>()
            {
                { "A02_036_080322_V", "VitalSignFor1To3"},
                { "A02_035_080322_V", "VitalSignFor3To12"},
                { "A02_034_080322_V", "VitalSignFor1To4"},
                { "A02_033_080322_V", "VitalSignFor4To12"},
                { "A02_032_220321_VE", "VitalSignForOver12"}
            };

            var forms_byVisit = unitOfWork.IPDVitalSignForPediatricsReponsitory.AsQueryable()
                        .Where(f => !f.IsDeleted && f.VisitId == visitId)
                        .ToList();

            List<MedicalRecordViewModel> listItem = new List<MedicalRecordViewModel>();
            foreach (KeyValuePair<string, string> item in dic_vital)
            {
                string formCode = item.Key;
                string type = item.Value;
                var forms = (from f in forms_byVisit
                             where f.FormType == formCode
                             orderby f.UpdatedAt descending
                             select f).ToList();
                MedicalRecordViewModel model;
                if (forms == null || forms.Count == 0)
                    model = new MedicalRecordViewModel(
                            "Bảng theo dõi dấu hiệu sinh tồn dành cho trẻ nhi",
                            "vital signs monitor for pediatric",
                            type
                        );
                else
                    model = new MedicalRecordViewModel(
                            "Bảng theo dõi dấu hiệu sinh tồn dành cho trẻ nhi",
                            "vital signs monitor for pediatric",
                            type,
                            forms[0]
                        );
                listItem.Add(model);
            }

            return listItem;
        }
		
		
		foreach (var item in request_oen_data)
            {
                var code = item.Value<string>("Code");               
                var value = item.Value<string>("Value");
                var oen_data = oen_datas.FirstOrDefault(e => e.Code == code);
                if (code == "TFTEOCANS")
                {
                    var valu2e = oen_data;
                }
                if (oen_data == null)
                    CreateExaminationNoteData(oen.Id, code, value);
                else if (oen_data.Value != value)
                    UpdateExaminationNoteData(oen_data, code, value);
            }
			
			
			
<add name="EmergencyDepartmentContext" connectionString="data source=10.115.40.152;initial catalog=EMR_TEST;persist security info=True;user id=eform_test_user;password=Vinmec@##2022;MultipleActiveResultSets=True;App=EntityFramework;Connection Timeout=160" providerName="System.Data.SqlClient" />



	  <add name="EmergencyDepartmentContext" connectionString="data source=10.115.40.152;initial catalog=EMR_DEV;persist security info=True;user id=eformdev;password=Effomm@12345678;MultipleActiveResultSets=True;App=EntityFramework;Connection Timeout=160" providerName="System.Data.SqlClient" />  </connectionStrings>


SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;

CrawlHtml

nối thông tin


 treatments_and_procedures += !string.IsNullOrEmpty(KHDT) ? "+ Kế hoạch điều trị và chăm sóc: " + KHDT + "\n" : "";
                        treatments_and_procedures += !string.IsNullOrEmpty(TVCK) ? "+ Tư vấn chuyên khoa: " + TVCK + "\n" : "";
                        treatments_and_procedures += !string.IsNullOrEmpty(PT) ? "+ Phẫu thuật/ Thủ thuật: " + PT + "\n" : "";






SOAP
https://shetland.azurewebsites.net/2021/05/11/connect-to-the-salesforce-soap-api-in-net/

 truy vấn linQ
 var quẻy = from p in list where p.A == "" select p;
 var kq = list.Select(
 (p) => {
 return new {
 A= p.A
 }}
 );
 var kq = list.SelectMany((p) => { return p.A};
 
 
 join 2 bảng, trả ra các object tương ứng
 
 var query = lists.Join(brands , p => p.Brand, b => b.Id, (p,b) => {
 return new {
 Ten = p.Name,
 ThuongHieu =b.Name
 }
 });
  
  GroupJoin
  var kq = list.GroupJoin(sub_list, b => b.Id, p => p.Brand, (brand, pros) => {
  return new {
  ThuongHieu = brand.Name,
  CacSp = pros
  };
  });
  
  Lấy ra n phần tử đầu tiên với Take, bỏ qua n phần tử đầu tiên Skip
  var kq = list.Take(n).ToList();
  
  // any trả về true, false
  var p = list.Any(p => p.Price == 700); 
  
  
  SỬ DỤNG HttpClient thực hiện các truy vânz HTTP(Get, Post)
  public satic void Request()
  {
  string url = "https://www.youtube.com/watch?v=iJlAMzFy4yQ&t=333s";
  var uri = new Uri(url);
  var host = uri.Host;
  }
  Lớp tĩnh DNS và lớp IPHostEntry
  Lớp Dns cung cấp các phương thức tĩnh để lấy thông tin về host (địa chỉ website, server cung cấp các dịch vụ mạng) từ hệ thống phân giải tên miền (Dns). 
  Các thông tin truy vấn được nó trả về một đối tượng giao diện IHostEntry.
  //hostname của máy local
   public satic void Main()
  {
  string url = "https://www.youtube.com/watch?v=iJlAMzFy4yQ&t=333s";
  var uri = new Uri(url);
  var hostname = Dns.GetHostName();
  var iphostentry = Dns.GetHostEntry(uri.Host);
  //mảng địa chỉ IP
  var ips = iphostentry.AddressList.ToList();
  }
  
  Thực hiện Http request
  1.Khởi tạo http client
  var httpClient = new HttpClient();
  2. Thiết lập các Header nếu cần
  httpClient.DefaultRequestHeaders.Add("Accept", "text/html,applicsation/xhtml...");
  3.Thực hiện truy vấn Get
  HttpResponeMessage response = await httpClient.GetAsynce(url);
  
  
  
  index + cache, hoặc prepare sẵn data bằng cron job.
  
  HANDLER trong HttpClient
  Sử dụng các handler: HttpClientHandler, SocketHttpHandler để tuỳ biến request, luuw và gửi Cookie với CookieContainer. 
  Dùng DiligatingHandler tạo Popeline, nhiều handler cho HttpClient CHỈ .NET CORE
  public async Task<string> HandlerHttp()
        {
            //1. Sử dụng SocketHandler
            var url = "https://postman-echo.com/post";
            //SocketHttpHandler
            var cookies = new CookieContainer();
            var handler = new SocketsHttpHandler();
            handler.AllowAutoRedirect = true;
            handler.AutomaticDecompression = DecompressionMethods.Deflate | DecomPressionMethods.GZip;
            handler.UsCookies = true;//lưu cookie
            handler.CookieContainer = cookies;

            var httpClient = new HttpClient();
            var httprequestMessage = new HttpRequestMessage();
            httprequestMessage.Method = HttpMethod.Post;
            httprequestMessage.RequestUri = new Uri(url);
            httprequestMessage.Headers.Add("User-Agent", "Mozilla/5.0");
            var param = new List<KeyValuePair<string, string>>();
            param.Add(new KeyValuePair<string, string>("KEY1", "VALUE1"));
            httprequestMessage.Content = new FormUrlEncodedContent(param);
            var response = await httpClient.SendAsync(httprequestMessage);
            //get cookies
            cookies.GetCookies(new Uri(url)).ToString().ForEach(c => {c.Name && c.Value); });

            var html = await response.Content.ReadAsStringAsync();
            return html;
        }
		
		
		stored proceture
		
		
		USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[GenQueryInsertProc]    Script Date: 30/01/2023 9:05:26 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[GenQueryInsertProc] (@jsonString nvarchar(MAX),@parentId INT)
AS 
BEGIN
	
	DECLARE @stringValue nvarchar(200),@query nvarchar(MAX)
	DECLARE @name nvarchar(200)
	DECLARE @CodeValue nvarchar(200)
	DECLARE @LabelValue nvarchar(200)
	DECLARE @ViNameValue nvarchar(200)
	DECLARE @EnNameValue nvarchar(200)
	DECLARE dataa CURSOR 
	FOR 
	  select  StringValue, [Name]
	  from parseJSON1(@jsonString) Where SequenceNo = 0
	  and Parent_ID =1
	OPEN dataa
	 FETCH NEXT FROM dataa -- Đọc dòng tiếp
			  INTO @stringValue, @name
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF UPPER(@name) = 'CODE' 
			SET @CodeValue = @stringValue;
		ELSE IF UPPER(@name) = 'LABEL'
			SET @LabelValue = @stringValue;
		ELSE IF UPPER(@name) = 'VINAME'
			SET @ViNameValue = @stringValue;
		ELSE IF UPPER(@name) = 'ENNAME'
		SET @EnNameValue = @stringValue;
	 FETCH NEXT FROM dataa -- Đọc dòng tiếp
			  INTO @stringValue, @name
		 
	END
		IF @@FETCH_STATUS <> 0
		PRINT 'INSERT INTO ICD10(Id,ViName,EnName,Code,IsDeleted) VALUES(NEWID(),'+CONVERT(NVARCHAR, isnull('N'''+@ViNameValue+'''','NULL'))+','+CONVERT(NVARCHAR, isnull('N'''+@EnNameValue+'''','NULL'))+ ',' + CONVERT(NVARCHAR, isnull('N'''+@CodeValue+'''','NULL')) + ',0)'
		PRINT @EnNameValue+'aaaa';
	CLOSE dataa              -- Đóng Cursor
	DEALLOCATE dataa         -- Giải phóng tài nguyên
END




USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[JsonToTable]    Script Date: 30/01/2023 9:05:39 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[JsonToTable] (@jsonString nvarchar(MAX))
AS 
BEGIN
	DECLARE @parent_id INT
	DECLARE parentIdCursor CURSOR 
	FOR 
	select parent_id
	  from parseJSON1(@jsonString) Where SequenceNo = 0
	  group by parent_id
	OPEN parentIdCursor
	 FETCH NEXT FROM parentIdCursor -- Đọc dòng tiếp
			  INTO @parent_id
	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT @parent_id;
		EXEC GenQueryInsertProc @jsonString,@parent_id
	 FETCH NEXT FROM parentIdCursor -- Đọc dòng tiếp
			  INTO @parent_id	 
	END
	CLOSE parentIdCursor              -- Đóng Cursor
	DEALLOCATE parentIdCursor         -- Giải phóng tài nguyên
END 


USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[prc_BradenScale_SearchByVisitId]    Script Date: 30/01/2023 9:06:00 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[prc_BradenScale_SearchByVisitId]
	@VISIT_ID		VARCHAR(50) = NULL,
	@USER_NAME 		VARCHAR(50) = NULL,
	@FROM_DATE		VARCHAR(20) = '',
	@TO_DATE 		VARCHAR(20) = '',
	@PAGE_INDEX 	INT = 1,
	@PAGE_SIZE  	INT = 5,
	@ORDER_BY 		VARCHAR(50) = 'A.TRANS_DATE',
	@DIRECTION_SORT VARCHAR(50) = 'DESC',
	@TOTAL_ROW 		INT  OUTPUT	
AS
BEGIN
	--prc_BradenScale_SearchByVisitId NULL, '', '', '', 1, 15, NULL, NULL, 0
     
	SET NOCOUNT ON;      
	DECLARE @sqlMain  NVARCHAR(4000);
	DECLARE @sql  NVARCHAR(4000);
	DECLARE @sqlCount NVARCHAR(4000);
	DECLARE @sqlF NVARCHAR(4000);

	CREATE TABLE #temp(id int)

	CREATE TABLE #tmpBraden
	(
		FormId uniqueidentifier, 
		VisitId uniqueidentifier, 
		Code nvarchar(max), 
		Value nvarchar(max)
	)

	IF @VISIT_ID IS NULL
		INSERT INTO #tmpBraden 
		SELECT FormId, VisitId, Code, Value 
		FROM FormDatas
		WHERE FormCode = 'A02_056_050919_VE'
	ELSE
		INSERT INTO #tmpBraden 
		SELECT FormId, VisitId, Code, Value 
		FROM FormDatas
		WHERE VisitId = @VISIT_ID

	IF (@ORDER_BY IS NULL)
	BEGIN
		SET @ORDER_BY = 'A.TRANS_DATE'
	END

	IF (@DIRECTION_SORT IS NULL)
	BEGIN
		SET @DIRECTION_SORT = 'DESC'
	END
	  
	SET @sql = N'SELECT ROW_NUMBER() OVER (Order By ' + @ORDER_BY + ' ' + @DIRECTION_SORT +') AS ''RowNum'', ';
	SET @sql = @sql + ' A.Id, A.VISIT_ID, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpBraden WHERE VisitId = A.VISIT_ID AND FormId = A.Id AND Code = ''IPDBRADEN43'') AS TotalScore, ';
	
	SET @sql = @sql + 'LTRIM((SELECT STUFF((
											SELECT '';'' + ISNULL(X.VALUE, '' '') 
											FROM(
												SELECT (ISNULL(Code,'''')  '+'+''-''+' + 'ISNULL([Value],'''')) AS Value, Code
												FROM #tmpBraden 
												WHERE (Value <> '''' AND Value IS NOT NULL) AND VisitId=A.VISIT_ID AND FormId=A.Id 
													AND Code IN (''IPDBRADEN45'',''IPDBRADEN46'', ''IPDBRADEN47'', ''IPDBRADEN48'', ''IPDBRADEN49'', ''IPDBRADEN50'', ''IPDBRADEN51'', ''IPDBRADEN52'', ''IPDBRADEN53'', ''IPDBRADEN54'')
											) AS X ORDER BY X.Code FOR XML PATH('''')
									), 1, 1,'''' ) )) AS Intervention,';	

	
	SET @sql = @sql + ' TRANS_DATE AS TransactionDate,CreatedBy, CreatedAt ';
	SET @sql = @sql + ' FROM IPD_BRADEN_SCALE AS A ';
	SET @sql = @sql + ' WHERE 1=1 '
    SET @sql = @sql + ' AND  A.IsDeleted = 0'
	IF (@VISIT_ID IS NOT NULL)
	BEGIN
		SET @sql = @sql + ' AND  A.VISIT_ID = ''' + @VISIT_ID + ''''
	END

	IF (@USER_NAME IS NOT NULL AND @USER_NAME <> '')
	BEGIN
		SET @sql = @sql + ' AND  A.CreatedBy = ''' + @USER_NAME + ''''
	END
    
	IF (@FROM_DATE = '' AND @TO_DATE <> '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE <= ''' + @TO_DATE + ''' )'     
	END
	
	IF (@FROM_DATE <> '' AND @TO_DATE = '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE >= ''' + @FROM_DATE + ''' )'     
	END
	
	IF (@FROM_DATE <> '' AND @TO_DATE <> '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE >=  ''' + @FROM_DATE + ''' AND A.TRANS_DATE <= ''' + @TO_DATE + ''' )'     
	END
		
	SET @sqlMain = N'SELECT * FROM('+ @sql +')a WHERE a.RowNum BETWEEN (' + CONVERT(VARCHAR(10),@PAGE_INDEX) + '-1) * ' + CONVERT(VARCHAR(10),@PAGE_SIZE) + '+1 AND (' + CONVERT(VARCHAR(10),@PAGE_INDEX) + ' * ' + CONVERT(VARCHAR(10),@PAGE_SIZE)+') '
    
	SET @sqlCount = N'INSERT INTO #temp SELECT COUNT(id) AS ''Total'' FROM('+@sql+')a'
	EXECUTE (@sqlCount)

	SET @TOTAL_ROW = (SELECT id FROM #temp);
	
	print @sqlMain   

	EXEC sp_executesql @sqlMain;
	
	SELECT @TOTAL_ROW AS TotalRow;

	SELECT COUNT(1) AS RowExisted 
	FROM IPD_BRADEN_SCALE 
	WHERE VISIT_ID =  @VISIT_ID and IsDeleted = 0; 

	DROP TABLE #temp
	DROP TABLE #tmpBraden
End



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[prc_VitalSignAdult_SearchByVisitId]    Script Date: 30/01/2023 9:10:04 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[prc_VitalSignAdult_SearchByVisitId]
	@VISIT_ID		VARCHAR(50) = NULL,
	@USER_NAME 		VARCHAR(50) = NULL,
	@FROM_DATE		VARCHAR(20) = '',
	@TO_DATE 		VARCHAR(20) = '',
	@PAGE_INDEX 	INT = 1,
	@PAGE_SIZE  	INT = 5,
	@ORDER_BY 		VARCHAR(50) = 'A.TRANS_DATE',
	@DIRECTION_SORT VARCHAR(50) = 'DESC',
	@TOTAL_ROW 		INT  OUTPUT	
AS
BEGIN
	--prc_VitalSignAdult_SearchByVisitId NULL, '', '', '', 1, 15, NULL, NULL, 0
     
	SET NOCOUNT ON;      
	DECLARE @sqlMain  NVARCHAR(MAX);
	DECLARE @sql  NVARCHAR(MAX);
	DECLARE @sqlCount NVARCHAR(MAX);
	DECLARE @sqlF NVARCHAR(MAX);

	CREATE TABLE #temp(id int)

	CREATE TABLE #tmpVital
	(
		FormId uniqueidentifier, 
		VisitId uniqueidentifier, 
		Code nvarchar(max), 
		Value nvarchar(max)
	)

	IF @VISIT_ID IS NULL
		INSERT INTO #tmpVital 
		SELECT FormId, VisitId, Code, Value 
		FROM FormDatas
		WHERE FormCode = 'A02_031_220321_V'
	ELSE
		INSERT INTO #tmpVital 
		SELECT FormId, VisitId, Code, Value 
		FROM FormDatas
		WHERE VisitId = @VISIT_ID
	
	
	IF (@ORDER_BY IS NULL)
	BEGIN
		SET @ORDER_BY = 'A.TRANS_DATE'
	END

	IF (@DIRECTION_SORT IS NULL)
	BEGIN
		SET @DIRECTION_SORT = 'DESC'
	END
	  
	SET @sql = N'SELECT ROW_NUMBER() OVER (Order By ' + @ORDER_BY + ' ' + @DIRECTION_SORT +') AS ''RowNum'', ';
	SET @sql = @sql + ' A.Id, A.VISIT_ID, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS01'') AS BreathRate, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS04'') AS SPO2, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS06'') AS LowBP, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS07'') AS HighBP, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS09'') AS Pulse, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS11'') AS Temperature, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS14'') AS Sense, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS16'') AS RespiratorySuport, ';
	
	SET @sql = @sql + ' (SELECT STUFF((SELECT ''-'' + ISNULL([Value], '' '') FROM #tmpVital WHERE  VisitId=A.VISIT_ID AND FormId=A.Id AND Code IN (''IPDMEWS20'',''IPDMEWS21'') ORDER BY Code ASC FOR XML PATH('''')), 1, 1, '''')) AS PainScore, ';

	SET @sql = @sql + ' (
							SELECT STUFF((SELECT ''-'' + ISNULL([Value], '' '') FROM #tmpVital WHERE  VisitId=A.VISIT_ID AND FormId=A.Id AND Code IN (''IPDMEWS23'',''IPDMEWS24'') ORDER BY Code ASC FOR XML PATH('''')), 1, 1, '''')
						) AS CapillaryBlood, ';
	
	SET @sql = @sql + 'LTRIM((SELECT STUFF((
											SELECT ''; '' + ISNULL(X.VALUE, '' '') 
											FROM(
												SELECT (CASE Code WHEN ''IPDMEWS32'' THEN ''T('''+'+[Value]+'+'''ml)''
																WHEN ''IPDMEWS34'' THEN ''P('''+'+[Value]+'+'''ml)''
																WHEN ''IPDMEWS36'' THEN ''M('''+'+[Value]+'+'''ml)''
																WHEN ''IPDMEWS38'' THEN ''S('''+'+[Value]+'+'''ml)''
																WHEN ''IPDMEWS40'' THEN ''AN('''+'+[Value]+'+'''ml)''
																WHEN ''IPDMEWS42'' THEN ''D('''+'+[Value]+'+'''ml)'' END ) AS Value, Code
												FROM #tmpVital 
												WHERE (Value <> '''' AND Value IS NOT NULL) AND VisitId=A.VISIT_ID AND FormId=A.Id 
													AND Code IN (''IPDMEWS32'',''IPDMEWS34'', ''IPDMEWS36'', ''IPDMEWS38'', ''IPDMEWS40'', ''IPDMEWS42'')
											) AS X ORDER BY X.Code FOR XML PATH('''')
									), 1, 1,'''' ) )) AS FluidIn,';
	
	SET @sql = @sql + ' (SELECT [Value] AS Value FROM #tmpVital WHERE (Value <> '''' AND Value IS NOT NULL) AND VisitId=A.VISIT_ID AND FormId=A.Id AND Code IN (''IPDMEWS44'')) AS TotalFluidIn,';
	
	SET @sql = @sql + 'LTRIM((SELECT STUFF((
											SELECT ''; '' + ISNULL(X.VALUE, '' '') 
											FROM(
												SELECT (CASE Code WHEN ''IPDMEWS47'' THEN ''N('''+'+[Value]+'+'''ml)''
																  WHEN ''IPDMEWS49'' THEN ''Ph('''+'+[Value]+'+'''ml)''
																  WHEN ''IPDMEWS51'' THEN ''NT('''+'+[Value]+'+'''ml)''
																  WHEN ''IPDMEWS53'' THEN ''DL('''+'+[Value]+'+'''ml)'' END ) AS Value, Code
												FROM #tmpVital 
												WHERE (Value <> '''' AND Value IS NOT NULL) AND VisitId=A.VISIT_ID AND FormId=A.Id 
													AND Code IN (''IPDMEWS47'',''IPDMEWS49'', ''IPDMEWS51'', ''IPDMEWS53'')
											) AS X ORDER BY X.Code FOR XML PATH('''')
									), 1, 1,'''' ) )) AS FluidOut,';

	SET @sql = @sql + ' (SELECT [Value] AS Value FROM #tmpVital WHERE (Value <> '''' AND Value IS NOT NULL) AND VisitId=A.VISIT_ID AND FormId=A.Id AND Code IN (''IPDMEWS55'')) AS TotalFluidOut,';	

	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS57'') AS TotalBilan, ';
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS18'') AS TotalMews, ';	
	SET @sql = @sql + ' (SELECT [Value] FROM #tmpVital WHERE VisitId=A.VISIT_ID AND FormId=A.Id AND Code=''IPDMEWS27'') AS VIPScore, ';
	
	SET @sql = @sql + ' TRANS_DATE AS TransactionDate,CreatedBy, CreatedAt ';
	SET @sql = @sql + ' FROM IPD_VITALSIGN_ADULT AS A ';
	SET @sql = @sql + ' WHERE 1=1 '
    SET @sql = @sql + ' AND  A.IsDeleted = 0'
	
	IF (@VISIT_ID IS NOT NULL)
	BEGIN
		SET @sql = @sql + ' AND A.VISIT_ID = ''' + @VISIT_ID + ''''
	END

	IF (@USER_NAME IS NOT NULL AND @USER_NAME <> '')
	BEGIN
		SET @sql = @sql + ' AND A.CreatedBy = ''' + @USER_NAME + ''''
	END
    
	IF (@FROM_DATE = '' AND @TO_DATE <> '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE <= ''' + @TO_DATE + ''' )'     
	END
	
	IF (@FROM_DATE <> '' AND @TO_DATE = '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE >= ''' + @FROM_DATE + ''' )'     
	END
	
	IF (@FROM_DATE <> '' AND @TO_DATE <> '')
	BEGIN
		SET @sql = @sql + ' AND (A.TRANS_DATE >=  ''' + @FROM_DATE + ''' AND A.TRANS_DATE <= ''' + @TO_DATE + ''' )'     
	END
		
	SET @sqlMain = N'SELECT * FROM('+ @sql +')a WHERE a.RowNum BETWEEN (' + CONVERT(VARCHAR(10),@PAGE_INDEX) + '-1) * ' + CONVERT(VARCHAR(10),@PAGE_SIZE) + '+1 AND (' + CONVERT(VARCHAR(10),@PAGE_INDEX) + ' * ' + CONVERT(VARCHAR(10),@PAGE_SIZE)+') '
    
	SET @sqlCount = N'INSERT INTO #temp SELECT COUNT(id) AS ''Total'' FROM('+@sql+')a'
	EXECUTE (@sqlCount)

	SET @TOTAL_ROW = (SELECT id FROM #temp);
	
	print @sqlMain   

	EXEC sp_executesql @sqlMain;
	
	SELECT @TOTAL_ROW AS TotalRow;

	SELECT COUNT(1) AS RowExisted 
	FROM IPD_VITALSIGN_ADULT 
	WHERE VISIT_ID =  @VISIT_ID and IsDeleted = 0; 

	DROP TABLE #temp
	DROP TABLE #tmpVital
End





USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[Proc_CreateOrUpdateICD10]    Script Date: 30/01/2023 9:10:32 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[Proc_CreateOrUpdateICD10]
(
	@ViName NVARCHAR(MAX),
	@EnName NVARCHAR(MAX),
	@Code VARCHAR(100)
	--@GroupCode NVARCHAR(MAX)
)
AS
BEGIN 
	IF((SELECT COUNT(Id) FROM ICD10 WHERE Code = @Code) > 0)
	BEGIN 
		UPDATE ICD10 SET ViName = @ViName, EnName = @EnName
								,ViNameWithoutSign =(select [dbo].[fuChuyenCoDauThanhKhongDau](@ViName))
								+ ' ' + @EnName
								, UpdatedAt = GETDATE(), CreatedAt = GETDATE()
						 
					 WHERE Code = @Code
	END
	ELSE
	BEGIN
		INSERT INTO ICD10(Id, IsDeleted, CreatedAt, UpdatedAt, ViName, EnName, ViNameWithoutSign, Code)
		VALUES
		(NEWID(), 0, GETDATE(), GETDATE(), @ViName, @EnName
		,(SELECT [dbo].[fuChuyenCoDauThanhKhongDau](@ViName)) + ' ' + @EnName  , @Code)

	END
END



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[QueryHanOverCheckList]    Script Date: 30/01/2023 9:10:49 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[QueryHanOverCheckList]
	@Hospital nvarchar(100) = NULL,
	@StarDate varchar(20) = NULL,
	@EnDate varchar(20) = NULL,
	@Recivice nvarchar(100) = NULL
AS
BEGIN
	set @Hospital = '%' + @Hospital + '%';
	if @Hospital IS NULL
	BEGIN
		SET @Hospital = N'%%';
	END
	IF @StarDate IS NULL
	BEGIN
		SET @StarDate = '';
	END
	IF @EnDate IS NULL
	BEGIN
		SET @EnDate = CONVERT(VARCHAR(20), GETDATE());
	END
	IF @Recivice IS NULL
	BEGIN
		SET @Recivice = N'%%';
	END

	select 
		Q.Id, Q.PID, Q.[Visit Code], Q.[Full Name], Q.Phone
		,Q.[Nam Sinh], Q.[Nơi Chuyển], S.ViName[Nơi đến], Q.[ĐD chuyển]
		,Q.[BS chuyển], Q.[ĐD Nhận], Q.[BS Nhận], Q.[Thời gian chuyển]
	from Specialties S 
	join (select
		Han.Id, C.PID[PID], I.VisitCode[Visit Code], C.Fullname[Full Name]
		,C.Phone[Phone], C.DateOfBirth[Nam Sinh], S.ViName[Nơi Chuyển], Han.ReceivingUnitPhysicianId[Id Nơi Đến]
		,Us.Username[ĐD chuyển], Us3.Username[BS chuyển], Us2.Username[ĐD Nhận]
		, Us4.Username[BS Nhận], Han.HandOverTimePhysician[Thời gian chuyển]
	from IPDHandOverCheckLists Han
	join IPDs I on Han.Id = I.HandOverCheckListId
	join Customers C on I.CustomerId = C.Id
	join Specialties S on Han.HandOverUnitPhysicianId = S.Id
	left join Users Us on Han.HandOverNurseId = Us.Id
	left join Users Us2 on Han.ReceivingNurseId = Us2.Id
	left join Users Us3 on Han.HandOverPhysicianId = Us3.Id
	left join Users Us4 on Han.ReceivingPhysicianId = Us4.Id
	where Han.ReceivingUnitPhysicianId in (select Sp.Id from Sites S
	join Specialties Sp on S.Id = Sp.SiteId where Upper(S.ViName) Like Upper(@Hospital))
	and Han.IsDeleted = 0 and I.IsDeleted = 0 and C.IsDeleted = 0 and S.IsDeleted = 0
	and Han.HandOverTimePhysician >= CONVERT(datetime, @StarDate) AND Han.HandOverTimePhysician <= CONVERT(datetime, @EnDate)
	) Q on S.Id = Q.[Id Nơi Đến] where Upper(S.ViName) LIKE Upper(@Recivice)
	union all
	select 
		Q.Id, Q.PID, Q.[Visit Code], Q.[Full Name], Q.Phone
		,Q.[Nam Sinh], Q.[Nơi Chuyển], S.ViName[Nơi đến], Q.[ĐD chuyển]
		,Q.[BS chuyển], Q.[ĐD Nhận], Q.[BS Nhận], Q.[Thời gian chuyển]
	from Specialties S 
	join (select
		Han.Id, C.PID[PID], I.VisitCode[Visit Code], C.Fullname[Full Name]
		,C.Phone[Phone], C.DateOfBirth[Nam Sinh], S.ViName[Nơi Chuyển], Han.ReceivingUnitPhysicianId[Id Nơi Đến]
		,Us.Username[ĐD chuyển], Us3.Username[BS chuyển], Us2.Username[ĐD Nhận]
		, Us4.Username[BS Nhận], Han.HandOverTimePhysician[Thời gian chuyển]
	from OPDHandOverCheckLists Han
	join OPDs I on Han.Id = I.OPDHandOverCheckListId
	join Customers C on I.CustomerId = C.Id
	join Specialties S on Han.HandOverUnitPhysicianId = S.Id
	left join Users Us on Han.HandOverNurseId = Us.Id
	left join Users Us2 on Han.ReceivingNurseId = Us2.Id
	left join Users Us3 on Han.HandOverPhysicianId = Us3.Id
	left join Users Us4 on Han.ReceivingPhysicianId = Us4.Id
	where Han.ReceivingUnitPhysicianId in (select Sp.Id from Sites S
	join Specialties Sp on S.Id = Sp.SiteId where Upper(S.ViName) Like Upper(@Hospital))
	and Han.IsDeleted = 0 and I.IsDeleted = 0 and C.IsDeleted = 0 and S.IsDeleted = 0
	and Han.HandOverTimePhysician >= CONVERT(datetime, @StarDate) AND Han.HandOverTimePhysician <= CONVERT(datetime, @EnDate)
	) Q on S.Id = Q.[Id Nơi Đến] where Upper(S.ViName) LIKE Upper(@Recivice) 
	union all
	select 
		Q.Id, Q.PID, Q.[Visit Code], Q.[Full Name], Q.Phone
		,Q.[Nam Sinh], Q.[Nơi Chuyển], S.ViName[Nơi đến], Q.[ĐD chuyển]
		,Q.[BS chuyển], Q.[ĐD Nhận], Q.[BS Nhận], Q.[Thời gian chuyển]
	from Specialties S 
	join (select
		Han.Id, C.PID[PID], I.VisitCode[Visit Code], C.Fullname[Full Name]
		,C.Phone[Phone], C.DateOfBirth[Nam Sinh], S.ViName[Nơi Chuyển], Han.ReceivingUnitPhysicianId[Id Nơi Đến]
		,Us.Username[ĐD chuyển], Us3.Username[BS chuyển], Us2.Username[ĐD Nhận]
		, Us4.Username[BS Nhận], Han.HandOverTimePhysician[Thời gian chuyển]
	from EDHandOverCheckLists Han
	join EDs I on Han.Id = I.HandOverCheckListId
	join Customers C on I.CustomerId = C.Id
	join Specialties S on Han.HandOverUnitPhysicianId = S.Id
	left join Users Us on Han.HandOverNurseId = Us.Id
	left join Users Us2 on Han.ReceivingNurseId = Us2.Id
	left join Users Us3 on Han.HandOverPhysicianId = Us3.Id
	left join Users Us4 on Han.ReceivingPhysicianId = Us4.Id
	where Han.ReceivingUnitPhysicianId in (select Sp.Id from Sites S
	join Specialties Sp on S.Id = Sp.SiteId where Upper(S.ViName) Like Upper(@Hospital))
	and Han.IsDeleted = 0 and I.IsDeleted = 0 and C.IsDeleted = 0 and S.IsDeleted = 0
	and Han.HandOverTimePhysician >= CONVERT(datetime, @StarDate) AND Han.HandOverTimePhysician <= CONVERT(datetime, @EnDate)
	) Q on S.Id = Q.[Id Nơi Đến] where Upper(S.ViName) LIKE Upper(@Recivice) 
	union all
	select 
		Q.Id, Q.PID, Q.[Visit Code], Q.[Full Name], Q.Phone
		,Q.[Nam Sinh], Q.[Nơi Chuyển], S.ViName[Nơi đến], Q.[ĐD chuyển]
		,Q.[BS chuyển], Q.[ĐD Nhận], Q.[BS Nhận], Q.[Thời gian chuyển]
	from Specialties S 
	join (select
		Han.Id, C.PID[PID], I.VisitCode[Visit Code], C.Fullname[Full Name]
		,C.Phone[Phone], C.DateOfBirth[Nam Sinh], S.ViName[Nơi Chuyển], Han.ReceivingUnitPhysicianId[Id Nơi Đến]
		,Us.Username[ĐD chuyển], Us3.Username[BS chuyển], Us2.Username[ĐD Nhận]
		, Us4.Username[BS Nhận], Han.HandOverTimePhysician[Thời gian chuyển]
	from EOCHandOverCheckLists Han
	join EOCs I on Han.VisitId = I.Id
	join Customers C on I.CustomerId = C.Id
	join Specialties S on Han.HandOverUnitPhysicianId = S.Id
	left join Users Us on Han.HandOverNurseId = Us.Id
	left join Users Us2 on Han.ReceivingNurseId = Us2.Id
	left join Users Us3 on Han.HandOverPhysicianId = Us3.Id
	left join Users Us4 on Han.ReceivingPhysicianId = Us4.Id
	where Han.ReceivingUnitPhysicianId in (select Sp.Id from Sites S
	join Specialties Sp on S.Id = Sp.SiteId where Upper(S.ViName) Like Upper(@Hospital))
	and Han.IsDeleted = 0 and I.IsDeleted = 0 and C.IsDeleted = 0 and S.IsDeleted = 0
	and Han.HandOverTimePhysician >= CONVERT(datetime, @StarDate) AND Han.HandOverTimePhysician <= CONVERT(datetime, @EnDate)
	) Q on S.Id = Q.[Id Nơi Đến] where Upper(S.ViName) LIKE Upper(@Recivice) 	
	ORDER BY Q.[Thời gian chuyển]
END




USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[SaveLog]    Script Date: 30/01/2023 9:11:44 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec [SaveLog] @CreatedBy = 'tga', @Ip='', @URI= '', @Action= '', @Request= '', @Response= '';
ALTER PROCEDURE [dbo].[SaveLog] 
					@CreatedBy nvarchar(MAX),
					@Ip nvarchar(MAX),
					@URI nvarchar(MAX),
					@Action nvarchar(MAX),
					@Request nvarchar(MAX),
					@Response nvarchar(MAX)
					AS
BEGIN
	DECLARE @sql NVARCHAR(MAX) 
	SET @sql = 'INSERT INTO [EFORM_DB_CHECK].[dbo].[Logs] (Id,CreatedAt,CreatedBy,Ip,URI,Action,Request,Response)'
	SET @sql = @sql + 'VALUES(NEWID(),GETDATE(),N'''+@CreatedBy+''',N'''+@Ip+''','''+@URI+''',N'''+ @Action +''',N'''+ @Request +''',N'''+@Response+''')'
	PRINT (@sql)
	EXEC(@sql)
END;



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[send_message_all]    Script Date: 30/01/2023 9:11:56 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[send_message_all] @vimes nvarchar(max), @enmes nvarchar(max)
AS
BEGIN
	declare @MyCursor Cursor, @username varchar(50);
	SET @MyCursor = CURSOR FOR
	select Username from Users where IsDeleted = 0;

	OPEN @MyCursor;
	FETCH NEXT FROM @MyCursor into @username;

	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into Notifications (Id, CreatedAt, UpdatedAt, IsDeleted, Seen, [Priority],ToUser, VisitTypeGroupCode, ViMessage, EnMessage) 
		values (newid(), getdate(), getdate(), 0, 0,0,@username, 'INFO', @vimes, @enmes)
		FETCH NEXT FROM @MyCursor into @username;
	END; 
	CLOSE @MyCursor ;
	DEALLOCATE @MyCursor;
END;



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[ShareOrderSet]    Script Date: 30/01/2023 9:12:11 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[ShareOrderSet]  @package_id uniqueidentifier
AS
BEGIN
	declare @MyCursor Cursor, @UserId uniqueidentifier;
	SET @MyCursor = CURSOR FOR
		(select U.Id from Users as U
			where
			U.IsDeleted = 0 and 
			--Username = 'nant11' and
			EXISTS(
				Select * from PositionUsers as po
				left join Positions on Po.PositionId = Positions.Id
				where Positions.EnName = 'Doctor' and po.IsDeleted = 0 and U.Id = po.UserId
			)
			and EXISTS(
				Select * from UserSpecialties as uss
				left join Specialties on Specialties.Id = uss.SpecialtyId
				left join Sites on Specialties.SiteId = Sites.Id
				where
				Sites.ApiCode = 'HHN' and uss.IsDeleted = 0 and Specialties.IsDeleted = 0 and U.Id = uss.UserId
			)
		)
	OPEN @MyCursor;
	FETCH NEXT FROM @MyCursor into @UserId;

	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into ChargePackageUsers(Id, CreatedAt, UpdatedAt, IsDeleted, UserId, ChargePackageId) 
								values (newid(), getdate(), getdate(), 0, @UserId, @package_id)
		FETCH NEXT FROM @MyCursor into @UserId;
	END; 
	CLOSE @MyCursor ;
	DEALLOCATE @MyCursor;
END;



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[unlock_form]    Script Date: 30/01/2023 9:12:30 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[unlock_form] @created_at datetime, @spec_id uniqueidentifier, @expired datetime
as
begin
	declare @MyCursor Cursor, @username varchar(40), @opdid uniqueidentifier, @record_code varchar(50);
	BEGIN
		SET @MyCursor = CURSOR FOR
		select Users.Username, OPDs.Id, OPDs.RecordCode from OPDs 
		inner join Users on Users.Id = OPDs.PrimaryDoctorId
		where 
			OPDs.EDStatusId = '0500D704-5CA9-4D9A-A50E-4DF2F9EB93BD' and 
			OPDs.SpecialtyId = @spec_id and
			OPDs.CreatedAt < @created_at and
			OPDs.IsDeleted = 0

		OPEN @MyCursor;
		FETCH NEXT FROM @MyCursor into @username, @opdid, @record_code;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			insert into UnlockFormToUpdates (Id, CreatedAt, UpdatedAt, IsDeleted, Username, ExpiredAt, FormCode, FormName, VisitId, RecordCode)
			values (newid(), getdate(), getdate(), 0, @username, @expired, 'OPDOEN', N'Phiếu khám ngoại trú', @opdid, @record_code);
			FETCH NEXT FROM @MyCursor into @username, @opdid, @record_code;
		END; 

		CLOSE @MyCursor ;
		DEALLOCATE @MyCursor;
	END;
end;



USE [EMR_DEV]
GO
/****** Object:  StoredProcedure [dbo].[spMoveDataTableLogToDBOther]    Script Date: 30/01/2023 9:12:26 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spMoveDataTableLogToDBOther] 
	@takeRowNumber int
AS
BEGIN
	DECLARE @alreadyExists bit
	DECLARE @id uniqueidentifier
	DECLARE logCursor CURSOR
	FOR select TOP(@takeRowNumber) Id
		from EFORM_TEST.dbo.Logs order by EFORM_TEST.dbo.Logs.CreatedAt 
	OPEN logCursor
	FETCH NEXT FROM logCursor
	INTO @id

	WHILE @@FETCH_STATUS = 0
	BEGIN
		--Print @id;
		SET @alreadyExists = (select count(*) FROM EFORM_DEV.dbo.Logs where Id = @id);
		IF @alreadyExists = 0  
			INSERT INTO EFORM_THANGDC.dbo.Logs
			SELECT * FROM EFORM_TEST.dbo.Logs WHERE Id = @id;
			DELETE FROM EFORM_TEST.dbo.Logs WHERE Id = @id;
	FETCH NEXT FROM logCursor -- Ð?c dòng ti?p
	INTO @id
	END
	CLOSE logCursor
	DEALLOCATE logCursor
END


FUNCTION
USE [EMR_DEV]
GO
/****** Object:  UserDefinedFunction [dbo].[FN_TinhSoBenhNhanTrongKhoa]    Script Date: 30/01/2023 9:13:06 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[FN_TinhSoBenhNhanTrongKhoa](
	@TuNgay Date,
	@DenNgay Date,
	@BenhVien NVARCHAR(MAX),
	@Khoa NVARCHAR(MAX)
)RETURNS TABLE 
AS
RETURN
(
	SELECT * FROM (SELECT  SI.ViName[BỆNH VIỆN],N'Nội trú'[Khu vực], S.ViName[KHOA], A.[Số Lượng NB Tiếp Vào Khoa] FROM (
	SELECT COUNT(I.Id)[Số Lượng NB Tiếp Vào Khoa], I.SpecialtyId,  I.SiteId FROM IPDs I, IPDs I2
	WHERE I.IsDeleted = 0 AND I.SpecialtyId = I2.SpecialtyId AND I.SiteId = I2.SiteId AND I2.IsDeleted = 0
	AND I.AdmittedDate >=CONVERT(datetime, @TuNgay) AND I.AdmittedDate <= CONVERT(datetime, @DenNgay)
	GROUP BY I.SpecialtyId , I.SiteId ) AS A
	INNER JOIN Specialties S ON A.SpecialtyId = S.Id
	INNER JOIN Sites SI ON A.SiteId = SI.Id
	UNION ALL 
		SELECT  SI.ViName[BỆNH VIỆN],N'Ngoại trú'[Khu vực], S.ViName[KHOA], A.[Số Lượng NB Tiếp Vào Khoa] FROM (
		SELECT COUNT(I.Id)[Số Lượng NB Tiếp Vào Khoa], I.SpecialtyId,  I.SiteId FROM OPDs I, OPDs I2
		WHERE I.IsDeleted = 0 AND I.SpecialtyId = I2.SpecialtyId AND I.SiteId = I2.SiteId AND I2.IsDeleted = 0
		AND I.AdmittedDate >=CONVERT(datetime, @TuNgay) AND I.AdmittedDate <= CONVERT(datetime, @DenNgay)
		GROUP BY I.SpecialtyId , I.SiteId ) AS A
		INNER JOIN Specialties S ON A.SpecialtyId = S.Id
		INNER JOIN Sites SI ON A.SiteId = SI.Id

	UNION ALL
		SELECT  SI.ViName[BỆNH VIỆN],N'Cấp cứu'[Khu vực], S.ViName[KHOA], A.[Số Lượng NB Tiếp Vào Khoa] FROM (
		SELECT COUNT(I.Id)[Số Lượng NB Tiếp Vào Khoa], I.SpecialtyId,  I.SiteId FROM EDs I, EDs I2
		WHERE I.IsDeleted = 0 AND I.SpecialtyId = I2.SpecialtyId AND I.SiteId = I2.SiteId AND I2.IsDeleted = 0
		AND I.AdmittedDate >=CONVERT(datetime, @TuNgay) AND I.AdmittedDate <= CONVERT(datetime, @DenNgay)
		GROUP BY I.SpecialtyId , I.SiteId ) AS A
		INNER JOIN Specialties S ON A.SpecialtyId = S.Id
		INNER JOIN Sites SI ON A.SiteId = SI.Id

		UNION ALL

		SELECT  SI.ViName[BỆNH VIỆN],N'Nội soi'[Khu vực], S.ViName[KHOA], A.[Số Lượng NB Tiếp Vào Khoa] FROM (
		SELECT COUNT(I.Id)[Số Lượng NB Tiếp Vào Khoa], I.SpecialtyId,  I.SiteId FROM EOCs I, EOCs I2
		WHERE I.IsDeleted = 0 AND I.SpecialtyId = I2.SpecialtyId AND I.SiteId = I2.SiteId AND I2.IsDeleted = 0
		AND I.AdmittedDate >=CONVERT(datetime, @TuNgay) AND I.AdmittedDate <= CONVERT(datetime, @DenNgay)
		GROUP BY I.SpecialtyId , I.SiteId ) AS A
		INNER JOIN Specialties S ON A.SpecialtyId = S.Id
		INNER JOIN Sites SI ON A.SiteId = SI.Id) AS TABLEVALUE
		WHERE TABLEVALUE. KHOA = @Khoa AND TABLEVALUE.[BỆNH VIỆN] = @BenhVien
)


USE [EMR_DEV]
GO
/****** Object:  UserDefinedFunction [dbo].[parseJSON1]    Script Date: 30/01/2023 9:28:41 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[parseJSON1]( @JSON NVARCHAR(MAX))
/**
Summary: >
  The code for the JSON Parser/Shredder will run in SQL Server 2005, 
  and even in SQL Server 2000 (with some modifications required).
 
  First the function replaces all strings with tokens of the form @Stringxx,
  where xx is the foreign key of the table variable where the strings are held.
  This takes them, and their potentially difficult embedded brackets, out of 
  the way. Names are  always strings in JSON as well as  string values.
 
  Then, the routine iteratively finds the next structure that has no structure 
  Contained within it, (and is, by definition the leaf structure), and parses it,
  replacing it with an object token of the form ‘@Objectxxx‘, or ‘@arrayxxx‘, 
  where xxx is the object id assigned to it. The values, or name/value pairs 
  are retrieved from the string table and stored in the hierarchy table. G
  radually, the JSON document is eaten until there is just a single root
  object left.
Author: PhilFactor
Date: 01/07/2010
Version: 
  Number: 4.6.2
  Date: 01/07/2019
  Why: case-insensitive version
Example: >
  Select * from parseJSON('{    "Person": 
      {
       "firstName": "John",
       "lastName": "Smith",
       "age": 25,
       "Address": 
           {
          "streetAddress":"21 2nd Street",
          "city":"New York",
          "state":"NY",
          "postalCode":"10021"
           },
       "PhoneNumbers": 
           {
           "home":"212 555-1234",
          "fax":"646 555-4567"
           }
        }
     }
  ')
Returns: >
  nothing
**/
	RETURNS @hierarchy TABLE
	  (
	   Element_ID INT IDENTITY(1, 1) NOT NULL, /* internal surrogate primary key gives the order of parsing and the list order */
	   SequenceNo [int] NULL, /* the place in the sequence for the element */
	   Parent_ID INT null, /* if the element has a parent then it is in this column. The document is the ultimate parent, so you can get the structure from recursing from the document */
	   Object_ID INT null, /* each list or object has an object id. This ties all elements to a parent. Lists are treated as objects here */
	   Name NVARCHAR(2000) NULL, /* the Name of the object */
	   StringValue NVARCHAR(MAX) NOT NULL,/*the string representation of the value of the element. */
	   ValueType VARCHAR(10) NOT null /* the declared type of the value represented as a string in StringValue*/
	  )
	  /*
 
	   */
	AS
	BEGIN
	  DECLARE
	    @FirstObject INT, --the index of the first open bracket found in the JSON string
	    @OpenDelimiter INT,--the index of the next open bracket found in the JSON string
	    @NextOpenDelimiter INT,--the index of subsequent open bracket found in the JSON string
	    @NextCloseDelimiter INT,--the index of subsequent close bracket found in the JSON string
	    @Type NVARCHAR(10),--whether it denotes an object or an array
	    @NextCloseDelimiterChar CHAR(1),--either a '}' or a ']'
	    @Contents NVARCHAR(MAX), --the unparsed contents of the bracketed expression
	    @Start INT, --index of the start of the token that you are parsing
	    @end INT,--index of the end of the token that you are parsing
	    @param INT,--the parameter at the end of the next Object/Array token
	    @EndOfName INT,--the index of the start of the parameter at end of Object/Array token
	    @token NVARCHAR(200),--either a string or object
	    @value NVARCHAR(MAX), -- the value as a string
	    @SequenceNo int, -- the sequence number within a list
	    @Name NVARCHAR(200), --the Name as a string
	    @Parent_ID INT,--the next parent ID to allocate
	    @lenJSON INT,--the current length of the JSON String
	    @characters NCHAR(36),--used to convert hex to decimal
	    @result BIGINT,--the value of the hex symbol being parsed
	    @index SMALLINT,--used for parsing the hex value
	    @Escape INT --the index of the next escape character
	    
	  DECLARE @Strings TABLE /* in this temporary table we keep all strings, even the Names of the elements, since they are 'escaped' in a different way, and may contain, unescaped, brackets denoting objects or lists. These are replaced in the JSON string by tokens representing the string */
	    (
	     String_ID INT IDENTITY(1, 1),
	     StringValue NVARCHAR(MAX)
	    )
	  SELECT--initialise the characters to convert hex to ascii
	    @characters='0123456789abcdefghijklmnopqrstuvwxyz',
	    @SequenceNo=0, --set the sequence no. to something sensible.
	  /* firstly we process all strings. This is done because [{} and ] aren't escaped in strings, which complicates an iterative parse. */
	    @Parent_ID=0;
	  WHILE 1=1 --forever until there is nothing more to do
	    BEGIN
	      SELECT
	        @start=PATINDEX('%[^a-zA-Z]["]%', @json collate SQL_Latin1_General_CP850_Bin);--next delimited string
	      IF @start=0 BREAK --no more so drop through the WHILE loop
	      IF SUBSTRING(@json, @start+1, 1)='"' 
	        BEGIN --Delimited Name
	          SET @start=@Start+1;
	          SET @end=PATINDEX('%[^\]["]%', RIGHT(@json, LEN(@json+'|')-@start) collate SQL_Latin1_General_CP850_Bin);
	        END
	      IF @end=0 --either the end or no end delimiter to last string
	        BEGIN-- check if ending with a double slash...
             SET @end=PATINDEX('%[\][\]["]%', RIGHT(@json, LEN(@json+'|')-@start) collate SQL_Latin1_General_CP850_Bin);
 		     IF @end=0 --we really have reached the end 
				BEGIN
				BREAK --assume all tokens found
				END
			END 
	      SELECT @token=SUBSTRING(@json, @start+1, @end-1)
	      --now put in the escaped control characters
	      SELECT @token=REPLACE(@token, FromString, ToString)
	      FROM
	        (SELECT           '\b', CHAR(08)
	         UNION ALL SELECT '\f', CHAR(12)
	         UNION ALL SELECT '\n', CHAR(10)
	         UNION ALL SELECT '\r', CHAR(13)
	         UNION ALL SELECT '\t', CHAR(09)
			 UNION ALL SELECT '\"', '"'
	         UNION ALL SELECT '\/', '/'
	        ) substitutions(FromString, ToString)
		SELECT @token=Replace(@token, '\\', '\')
	      SELECT @result=0, @escape=1
	  --Begin to take out any hex escape codes
	      WHILE @escape>0
	        BEGIN
	          SELECT @index=0,
	          --find the next hex escape sequence
	          @escape=PATINDEX('%\x[0-9a-f][0-9a-f][0-9a-f][0-9a-f]%', @token collate SQL_Latin1_General_CP850_Bin)
	          IF @escape>0 --if there is one
	            BEGIN
	              WHILE @index<4 --there are always four digits to a \x sequence   
	                BEGIN
	                  SELECT --determine its value
	                    @result=@result+POWER(16, @index)
	                    *(CHARINDEX(SUBSTRING(@token, @escape+2+3-@index, 1),
	                                @characters)-1), @index=@index+1 ;
	         
	                END
	                -- and replace the hex sequence by its unicode value
	              SELECT @token=STUFF(@token, @escape, 6, NCHAR(@result))
	            END
	        END
	      --now store the string away 
	      INSERT INTO @Strings (StringValue) SELECT @token
	      -- and replace the string with a token
	      SELECT @JSON=STUFF(@json, @start, @end+1,
	                    '@string'+CONVERT(NCHAR(5), @@identity))
	    END
	  -- all strings are now removed. Now we find the first leaf.  
	  WHILE 1=1  --forever until there is nothing more to do
	  BEGIN
	 
	  SELECT @Parent_ID=@Parent_ID+1
	  --find the first object or list by looking for the open bracket
	  SELECT @FirstObject=PATINDEX('%[{[[]%', @json collate SQL_Latin1_General_CP850_Bin)--object or array
	  IF @FirstObject = 0 BREAK
	  IF (SUBSTRING(@json, @FirstObject, 1)='{') 
	    SELECT @NextCloseDelimiterChar='}', @type='object'
	  ELSE 
	    SELECT @NextCloseDelimiterChar=']', @type='array'
	  SELECT @OpenDelimiter=@firstObject
	  WHILE 1=1 --find the innermost object or list...
	    BEGIN
	      SELECT
	        @lenJSON=LEN(@JSON+'|')-1
	  --find the matching close-delimiter proceeding after the open-delimiter
	      SELECT
	        @NextCloseDelimiter=CHARINDEX(@NextCloseDelimiterChar, @json,
	                                      @OpenDelimiter+1)
	  --is there an intervening open-delimiter of either type
	      SELECT @NextOpenDelimiter=PATINDEX('%[{[[]%',
	             RIGHT(@json, @lenJSON-@OpenDelimiter)collate SQL_Latin1_General_CP850_Bin)--object
	      IF @NextOpenDelimiter=0 
	        BREAK
	      SELECT @NextOpenDelimiter=@NextOpenDelimiter+@OpenDelimiter
	      IF @NextCloseDelimiter<@NextOpenDelimiter 
	        BREAK
	      IF SUBSTRING(@json, @NextOpenDelimiter, 1)='{' 
	        SELECT @NextCloseDelimiterChar='}', @type='object'
	      ELSE 
	        SELECT @NextCloseDelimiterChar=']', @type='array'
	      SELECT @OpenDelimiter=@NextOpenDelimiter
	    END
	  ---and parse out the list or Name/value pairs
	  SELECT
	    @contents=SUBSTRING(@json, @OpenDelimiter+1,
	                        @NextCloseDelimiter-@OpenDelimiter-1)
	  SELECT
	    @JSON=STUFF(@json, @OpenDelimiter,
	                @NextCloseDelimiter-@OpenDelimiter+1,
	                '@'+@type+CONVERT(NCHAR(5), @Parent_ID))
	  WHILE (PATINDEX('%[A-Za-z0-9@+.e]%', @contents collate SQL_Latin1_General_CP850_Bin))<>0 
	    BEGIN
	      IF @Type='object' --it will be a 0-n list containing a string followed by a string, number,boolean, or null
	        BEGIN
	          SELECT
	            @SequenceNo=0,@end=CHARINDEX(':', ' '+@contents)--if there is anything, it will be a string-based Name.
	          SELECT  @start=PATINDEX('%[^A-Za-z@][@]%', ' '+@contents collate SQL_Latin1_General_CP850_Bin)--AAAAAAAA
              SELECT @token=RTrim(Substring(' '+@contents, @start+1, @End-@Start-1)),
	            @endofName=PATINDEX('%[0-9]%', @token collate SQL_Latin1_General_CP850_Bin),
	            @param=RIGHT(@token, LEN(@token)-@endofName+1)
	          SELECT
	            @token=LEFT(@token, @endofName-1),
	            @Contents=RIGHT(' '+@contents, LEN(' '+@contents+'|')-@end-1)
	          SELECT  @Name=StringValue FROM @strings
	            WHERE string_id=@param --fetch the Name
	        END
	      ELSE 
	        SELECT @Name=null,@SequenceNo=@SequenceNo+1 
	      SELECT
	        @end=CHARINDEX(',', @contents)-- a string-token, object-token, list-token, number,boolean, or null
                IF @end=0
	        --HR Engineering notation bugfix start
	          IF ISNUMERIC(@contents) = 1
		    SELECT @end = LEN(@contents) + 1
	          Else
	        --HR Engineering notation bugfix end 
		  SELECT  @end=PATINDEX('%[A-Za-z0-9@+.e][^A-Za-z0-9@+.e]%', @contents+' ' collate SQL_Latin1_General_CP850_Bin) + 1
	       SELECT
	        @start=PATINDEX('%[^A-Za-z0-9@+.e][A-Za-z0-9@+.e]%', ' '+@contents collate SQL_Latin1_General_CP850_Bin)
	      --select @start,@end, LEN(@contents+'|'), @contents  
	      SELECT
	        @Value=RTRIM(SUBSTRING(@contents, @start, @End-@Start)),
	        @Contents=RIGHT(@contents+' ', LEN(@contents+'|')-@end)
	      IF SUBSTRING(@value, 1, 7)='@object' 
	        INSERT INTO @hierarchy
	          (Name, SequenceNo, Parent_ID, StringValue, Object_ID, ValueType)
	          SELECT @Name, @SequenceNo, @Parent_ID, SUBSTRING(@value, 8, 5),
	            SUBSTRING(@value, 8, 5), 'object' 
	      ELSE 
	        IF SUBSTRING(@value, 1, 6)='@array' 
	          INSERT INTO @hierarchy
	            (Name, SequenceNo, Parent_ID, StringValue, Object_ID, ValueType)
	            SELECT @Name, @SequenceNo, @Parent_ID, SUBSTRING(@value, 7, 5),
	              SUBSTRING(@value, 7, 5), 'array' 
	        ELSE 
	          IF SUBSTRING(@value, 1, 7)='@string' 
	            INSERT INTO @hierarchy
	              (Name, SequenceNo, Parent_ID, StringValue, ValueType)
	              SELECT @Name, @SequenceNo, @Parent_ID, StringValue, 'string'
	              FROM @strings
	              WHERE string_id=SUBSTRING(@value, 8, 5)
	          ELSE 
	            IF @value IN ('true', 'false') 
	              INSERT INTO @hierarchy
	                (Name, SequenceNo, Parent_ID, StringValue, ValueType)
	                SELECT @Name, @SequenceNo, @Parent_ID, @value, 'boolean'
	            ELSE
	              IF @value='null' 
	                INSERT INTO @hierarchy
	                  (Name, SequenceNo, Parent_ID, StringValue, ValueType)
	                  SELECT @Name, @SequenceNo, @Parent_ID, @value, 'null'
	              ELSE
	                IF PATINDEX('%[^0-9]%', @value collate SQL_Latin1_General_CP850_Bin)>0 
	                  INSERT INTO @hierarchy
	                    (Name, SequenceNo, Parent_ID, StringValue, ValueType)
	                    SELECT @Name, @SequenceNo, @Parent_ID, @value, 'real'
	                ELSE
	                  INSERT INTO @hierarchy
	                    (Name, SequenceNo, Parent_ID, StringValue, ValueType)
	                    SELECT @Name, @SequenceNo, @Parent_ID, @value, 'int'
	      if @Contents=' ' Select @SequenceNo=0
	    END
	  END
	INSERT INTO @hierarchy (Name, SequenceNo, Parent_ID, StringValue, Object_ID, ValueType)
	  SELECT '-',1, NULL, '', @Parent_ID-1, @type
	--
	   RETURN
	END




USE [EMR_DEV]
GO
/****** Object:  UserDefinedFunction [dbo].[fuChuyenCoDauThanhKhongDau]    Script Date: 30/01/2023 9:29:17 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


ALTER FUNCTION [dbo].[fuChuyenCoDauThanhKhongDau]
(
      @strInput NVARCHAR(4000)
)
RETURNS NVARCHAR(4000)
AS
BEGIN  
    IF @strInput IS NULL RETURN @strInput
    IF @strInput = '' RETURN @strInput
    DECLARE @RT NVARCHAR(4000)
    DECLARE @SIGN_CHARS NCHAR(136)
    DECLARE @UNSIGN_CHARS NCHAR (136)
    SET @SIGN_CHARS = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệế
                  ìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵý
                  ĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍ
                  ÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ'
                  +NCHAR(272)+ NCHAR(208)
    SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeee
                  iiiiiooooooooooooooouuuuuuuuuuyyyyy
                  AADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIII
                  OOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD'
    DECLARE @COUNTER int
    DECLARE @COUNTER1 int
    SET @COUNTER = 1
    WHILE (@COUNTER <=LEN(@strInput))
    BEGIN
      SET @COUNTER1 = 1
      --Tìm trong chuỗi mẫu
       WHILE (@COUNTER1 <=LEN(@SIGN_CHARS)+1)
       BEGIN
     IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1))
            = UNICODE(SUBSTRING(@strInput,@COUNTER ,1) )
     BEGIN        
          IF @COUNTER=1
              SET @strInput = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1)
              + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)-1)
          ELSE
              SET @strInput = SUBSTRING(@strInput, 1, @COUNTER-1)
              +SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1)
              + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)- @COUNTER)
              BREAK
               END
             SET @COUNTER1 = @COUNTER1 +1
       END
      --Tìm tiếp
       SET @COUNTER = @COUNTER +1
    END
    SET @strInput = replace(@strInput,' ',' ')
    RETURN @strInput
END



USE [EMR_DEV]
GO
/****** Object:  UserDefinedFunction [dbo].[StringToObject]    Script Date: 30/01/2023 9:29:41 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[StringToObject](
	@String NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	DECLARE @StringResult NVARCHAR(MAX)
	DECLARE @ColExpir Nvarchar(100)
	DECLARE @MyCursor CURSOR
	DECLARE @i INT = 0
	SET @MyCursor = CURSOR FAST_FORWARD
	FOR
	SELECT * from OpenJson(@String)
	with( Code nvarchar(50) 'strict $.code')
	OPEN @MyCursor 
	FETCH NEXT FROM @MyCursor
	INTO @ColExpir
	SET @StringResult = ''
	WHILE @@FETCH_STATUS = 0
		BEGIN
		SET @i = @i +1
		IF (@i = 1)
			SET @StringResult = @StringResult + @ColExpir 
		ELSE
			SET @StringResult = @StringResult + ',' + @ColExpir

		FETCH NEXT FROM @MyCursor
		INTO @ColExpir
		END
	CLOSE @MyCursor
	DEALLOCATE @MyCursor
	RETURN @StringResult
END
------------Làm tròn số ROUND()



showmasterdatacode 1

halt63@vingroup.net
Vietnam@02468
D:\VINMEC\eform-backend

https://halt63:Vietnam%4002468@tfs.vinmec.com/Vinmec/eForm/_git/eform-backend

https://Haleyhaley123:Haley%40400402@github.com/Haleyhaley123/t-i-li-u.git
nếu clone file về thì add ref (download VINMEC_2.1.0)
copy 2 file vào Application EForm




Datediff: trừ hai khoảng thời gian.
Datediff(monht, tgian 1, tgian 2)

Prefetch, %temp%

Làm thông báo: khai báo ở appseting.jon


statusId: 1 app, 2 cả app cả cms





- isDelete: 1(xóa trên client), 0(còn trên client).
IF Boolean_expression
BEGIN
    -- Statement block executes when the Boolean expression is TRUE
END
ELSE
BEGIN
    -- Statement block executes when the Boolean expression is FALSE
END





- email: halt@niw.com.vn
- pass: haley@niw400402


- TỐI ƯU
+ Thu hẹp giá trị trả về (truy vấn các cột cụ thể trong bảng)
+ Sử dụng SQL Procedure: đối với những truy vấn thực hiện thường xuyên và có xử lý phức tạp:
 = giảm lượng dữ liệu truyền đến Server, Stored được lưu sẵn ở phía server do k cần phải gửi cả câu lệnh sql tới server mà chỉ cần gửi tham số
 = Được biên dịch ngay lần đầu chạy, những lần sau chạy sẽ sử dụng lại file đã biên dịch trước đó
 = có thể dùng vòng for để gọi nhiều câu lệnh gửi lên server giúp tái sử dụng code
 + Chỉ mực (Index) tăng truy vấn select và các mệnh đề where nhưng làm chậm việc dữ liệu nhập vào với các câu lệnh Insert và Update
 + Result-cache: 
 SELECT /*+ RESULT_CACHE */ department_id, avg(salary) avg_sal
    FROM hr.employees
   GROUP BY department_id
   
   
   
  T.GetProperties().ToList().ForEach(
  (propertyInfo o) =>{
  o.Name
  }
  );
  
  
  
  KIỂU DELEGATE
  là biến lưu phương thức
  Ví dụ:
  public delegate void ShowLog(string message);// biến delegate
  public static void Info(string s)
  {
  //code logic
  }
  public static void Method2(string m){
  //code logic
  }
  satic void Main(string[] args){
   ShowLog log = null;
   log = Info //lưu phương thức Info vào biến delegate log
   log("message của Info");//thi hành c1
   log.Invoke("xinc chào);//thi hành c2
   log.Method2;// biến log đc gán cho phương thức 2
   log("message của method2");
   //prr
   log += Info;
   log += Method2;
   
   //dùng Action 
   Acction action // delegate void Kieu(); k có tham số truyền vào
   Acction<string, in> action1 // delegate void Kieu(string s, int i);
   Action<string> action2;
   action2.Method2;
   action2 += Info;
   action2.Invoke("xin chào");
   
   //Function
   Func<int>f1 // delegate int Kieu();
   Func<string, double, string>f2; //delegate string Kieu(string s, double 2);// kiểu trả về đc liệt kê ở cuối cùng
  }
  
  
  <system.serviceModel>
  <bindings>
   <basicHttpBinding>
    <binding name="serviceSignFileSoap" />
    <binding name="serviceSignFileSoap1" />
   </basicHttpBinding>
  </bindings>
  <client>
   <endpoint address="http://10.111.125.83/Service/kyso/serviceEsign.asmx"
    binding="basicHttpBinding" bindingConfiguration="serviceSignFileSoap"
    contract="EsignService.serviceSignFileSoap" name="serviceSignFileSoap" />
   <endpoint address="http://10.111.125.83/Service/kyso/serviceEsign.asmx"
    binding="basicHttpBinding" bindingConfiguration="serviceSignFileSoap1"
    contract="EsignService.serviceSignFileSoap" name="serviceSignFileSoap1" />
  </client>
 </system.serviceModel>